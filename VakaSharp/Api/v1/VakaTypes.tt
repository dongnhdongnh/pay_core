<#@ IntelliSenseLanguage processor="tangibleT4Editor" language="C#" #>
<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import   namespace="System.Globalization" #>
<#@ include  file=".\Definitions\VakaApiTypeDef.t4" #>
<#@ include  file=".\Definitions\VakaApiMethodDef.t4" #>
<#@ output   extension=".cs" #>
// Auto Generated, do not edit.
using VakaSharp.DataAttributes;
using Newtonsoft.Json;
using System;
using System.Collections.Generic;

namespace VakaSharp.Api.v1
{
	#region generate api types
<# foreach (var type in apiTypes) { #>
	[Serializable]
	public class <#= type.Name #>
    {
<#      foreach (var field in type.Fields) { #>
		[JsonProperty("<#= field.Name #>")]<#= !string.IsNullOrWhiteSpace(field.AbiFieldType) ? "[AbiFieldType(\""+ field.AbiFieldType +"\")]" : "" #>
		public <#= field.Type #> <#= SnakeCaseToPascalCase(field.Name) #> { get; set; }<#= RenderFieldDefault(field)  #>
<#      } #>
    }
<# } #>
	#endregion

	#region generate api method types
<# foreach (var method in apiMethods) { #>
<#  if (method.Request != null) { #>
	[Serializable]
    public class <#= SnakeCaseToPascalCase(method.Name) #>Request
    {
<#      foreach (var field in method.Request) { #>
		[JsonProperty("<#= field.Name #>")]   
		public <#= field.Type #> <#= SnakeCaseToPascalCase(field.Name) #> { get; set; }<#= RenderFieldDefault(field)  #>
<#      } #>
    }
<#   } #>
<#  if (method.Response != null) { #>
	[Serializable]
    public class <#= SnakeCaseToPascalCase(method.Name) #>Response
    {
<#      foreach (var field in method.Response) { #>
		[JsonProperty("<#= field.Name #>")]   
		public <#= field.Type #> <#= SnakeCaseToPascalCase(field.Name) #> { get; set; }<#= RenderFieldDefault(field)  #>
<#      } #>
    }
<#   } #>
<#  if (method.GenericResponse != null && !string.IsNullOrWhiteSpace(method.ResponseGenericTypes)) { #>
	[Serializable]
    public class <#= SnakeCaseToPascalCase(method.Name) #>Response<#= method.ResponseGenericTypes #>
    {
<#      foreach (var field in method.GenericResponse) { #>
		[JsonProperty("<#= field.Name #>")]   
		public <#= field.Type #> <#= SnakeCaseToPascalCase(field.Name) #> { get; set; }<#= RenderFieldDefault(field)  #>
<#      } #>
    }
<#   } #>
<# } #>
	#endregion
}

