<#@ IntelliSenseLanguage processor="tangibleT4Editor" language="C#" #>
<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import   namespace="System.Globalization" #>
<#@ include  file=".\Definitions\VakaApiTypeDef.t4" #>
<#@ include  file=".\Definitions\VakaApiMethodDef.t4" #>
<#@ output   extension=".cs" #>
// Auto Generated, do not edit.
using VakaSharp.Helpers;
using Newtonsoft.Json;
using System.Collections.Generic;
using System.Threading.Tasks;

namespace VakaSharp.Api.{1}
{
    public class VakaApi
    { 
        private const string APIVersion = "v1";
        
        public VakaConfigurator Config { get; set; }
        public VakaApi(VakaConfigurator config)
        {
            Config = config;
        }

<# foreach (var method in apiMethods) { #>
<#   if(method.Request == null) { #>
<#		if(!string.IsNullOrWhiteSpace(method.ResponseGenericTypes)) {#>
		public async Task<<#= SnakeCaseToPascalCase(method.Name) #>Response<#= method.ResponseGenericTypes #>> <#= SnakeCaseToPascalCase(method.Name) #><#= method.ResponseGenericTypes #>(JsonSerializerSettings jsonSettings = null)
        {
            var url = string.Format("{0}/{1}/<#= method.Module #>/<#= method.Name #>", Config.HttpEndpoint, APIVersion);
<#        if(method.IsResponseCollection) { #>
			return new <#= SnakeCaseToPascalCase(method.Name) #>Response() { <#= SnakeCaseToPascalCase(method.Response[0].Name) #> = await HttpHelper.GetJsonAsync<<#= method.Response[0].Type#>>(url, jsonSettings) };
<#        } else { #>
            return await HttpHelper.GetJsonAsync<<#= SnakeCaseToPascalCase(method.Name) #>Response<#= method.ResponseGenericTypes #>>(url, jsonSettings);
<#        } #>
        }
<#      } #>
		public async Task<<#= SnakeCaseToPascalCase(method.Name) #>Response> <#= SnakeCaseToPascalCase(method.Name) #>(JsonSerializerSettings jsonSettings = null)
        {
            var url = string.Format("{0}/{1}/<#= method.Module #>/<#= method.Name #>", Config.HttpEndpoint, APIVersion);
<#        if(method.IsResponseCollection) { #>
			return new <#= SnakeCaseToPascalCase(method.Name) #>Response() { <#= SnakeCaseToPascalCase(method.Response[0].Name) #> = await HttpHelper.GetJsonAsync<<#= method.Response[0].Type#>>(url, jsonSettings) };
<#        } else { #>
            return await HttpHelper.GetJsonAsync<<#= SnakeCaseToPascalCase(method.Name) #>Response>(url, jsonSettings);
<#        } #>
        }
<#   } else { #>
<#		if(!string.IsNullOrWhiteSpace(method.ResponseGenericTypes)) {#>
		public async Task<<#= SnakeCaseToPascalCase(method.Name) #>Response<#= method.ResponseGenericTypes #>> <#= SnakeCaseToPascalCase(method.Name) #><#= method.ResponseGenericTypes #>(<#= SnakeCaseToPascalCase(method.Name) #>Request data<#= method.IsCachable ? ", bool reload = false" : "" #>, JsonSerializerSettings jsonSettings = null)
        {
            var url = string.Format("{0}/{1}/<#= method.Module #>/<#= method.Name #>", Config.HttpEndpoint, APIVersion);
<#        if(method.IsResponseCollection) { #>
			return new <#= SnakeCaseToPascalCase(method.Name) #>Response() { <#= SnakeCaseToPascalCase(method.Response[0].Name) #> = await HttpHelper.PostJson<#= method.IsCachable ? "WithCache" : "" #>Async<<#= method.Response[0].Type#>>(url, data<#= method.IsCachable ? ", reload" : "" #>, jsonSettings) };
<#        } else { #>
            return await HttpHelper.PostJson<#= method.IsCachable ? "WithCache" : "" #>Async<<#= SnakeCaseToPascalCase(method.Name) #>Response<#= method.ResponseGenericTypes #>>(url, data<#= method.IsCachable ? ", reload" : "" #>, jsonSettings);
<#        } #>
        }
<#      } #>
		public async Task<<#= SnakeCaseToPascalCase(method.Name) #>Response> <#= SnakeCaseToPascalCase(method.Name) #>(<#= SnakeCaseToPascalCase(method.Name) #>Request data<#= method.IsCachable ? ", bool reload = false" : "" #>, JsonSerializerSettings jsonSettings = null)
        {
            var url = string.Format("{0}/{1}/<#= method.Module #>/<#= method.Name #>", Config.HttpEndpoint, APIVersion);
<#        if(method.IsResponseCollection) { #>
			return new <#= SnakeCaseToPascalCase(method.Name) #>Response() { <#= SnakeCaseToPascalCase(method.Response[0].Name) #> = await HttpHelper.PostJson<#= method.IsCachable ? "WithCache" : "" #>Async<<#= method.Response[0].Type#>>(url, data<#= method.IsCachable ? ", reload" : "" #>, jsonSettings) };
<#        } else { #>
            return await HttpHelper.PostJson<#= method.IsCachable ? "WithCache" : "" #>Async<<#= SnakeCaseToPascalCase(method.Name) #>Response>(url, data<#= method.IsCachable ? ", reload" : "" #>, jsonSettings);
<#        } #>
        }
<#   } #>
<# } #>
    }
}
